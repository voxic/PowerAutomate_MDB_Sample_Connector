{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "MongoDB Data API",
    "description": "MongoDB Data API\nhttps://www.mongodb.com/data-api/ \n\nThe Data API provides you with a REST access to your data in MongoDB Atlas(https://www.mongodb.com/atlas), \nthe database-as-a-service offering by MongoDB.\n\nYou can find the full documentation on the MongoDB Data API on the https://docs.atlas.mongodb.com/api/data-api-resources/#data-api-resources\n\nGetting Started\n\nTo test out the MongoDB Data API connector, start by creating a MongoDB Atlas cluster (https://docs.atlas.mongodb.com/tutorial/).\n\nOnce you have a cluster up and running, enable the Data API (https://docs.atlas.mongodb.com/api/data-api/#1.-enable-the-data-api\n\nFrom the Atlas UI, copy the URL endpoint provided for the Data API, and paste the value in your URL_ENDPOINT variable. Set the base path to\n/app/<Data API App ID>/endpoint/data/beta/\n\nStill in the Atlas UI, create a new API key, copy the value and paste it in the API_KEY connection variable.\n\nFill in the other variables with the appropriate values for your cluster, database, and collection names.\n\nYou can now explore the various endpoints and see how to perform CRUD operations on your collection using the MongoDB Data API."
  },
  "host": "data.mongodb-api.com",
  "basePath": "/app/<Data API App ID>/endpoint/data/beta/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/action/insertOne": {
      "post": {
        "summary": "Insert Document",
        "description": "Using the `/insertOne` endpoint, you can add a document to a collection. Use the `document` property in the request body to specify the document that should be created.",
        "operationId": "InsertDocument",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "document": {
                  "type": "object",
                  "properties": {},
                  "description": "document"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "document": {}
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/findOne": {
      "post": {
        "summary": "Find Document",
        "description": "Using the `/findOne` endpoint will let you retrieve a single document from a collection. Use the `filter` property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be returned.",
        "operationId": "FindDocument",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "filter": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name"
                    }
                  },
                  "description": "filter"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": {
                  "name": "John Sample"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/updateOne": {
      "post": {
        "summary": "Update Document",
        "description": "You can use the `/updateOne` endpoint to update a single record. Use the `filter` property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be returned. Then use the `update` field to specify what should be updated. You should use one of the [update operators](https://docs.mongodb.com/manual/reference/operator/update-field/) to update your documents.",
        "operationId": "UpdateDocument",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "filter": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name"
                    }
                  },
                  "description": "filter"
                },
                "update": {
                  "type": "object",
                  "properties": {
                    "$set": {
                      "type": "object",
                      "properties": {
                        "age": {
                          "type": "integer",
                          "format": "int32",
                          "description": "age"
                        }
                      },
                      "description": "$set"
                    }
                  },
                  "description": "update"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": {
                  "name": "John Sample"
                },
                "update": {
                  "$set": {
                    "age": 24
                  }
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/deleteOne": {
      "post": {
        "summary": "Delete Document",
        "description": "To delete a single document, use the `/deleteOne` endpoint. Use the `filter` property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be deleted.",
        "operationId": "DeleteDocument",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "filter": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name"
                    }
                  },
                  "description": "filter"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": {
                  "name": "John Sample"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/insertMany": {
      "post": {
        "summary": "Insert Multiple Documents",
        "description": "You can add more than one document at a time by using the `/insertMany` endpoint. In that case, you must use the `documents` property in the body of the request to specify the array of documents you want to insert into the collection.",
        "operationId": "InsertMultipleDocuments",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "age": {
                        "type": "integer",
                        "format": "int32",
                        "description": "age"
                      }
                    }
                  },
                  "description": "documents"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "documents": [
                  {
                    "name": "Miss MongoDB",
                    "age": 35
                  },
                  {
                    "name": "Mister Postman",
                    "age": 37
                  },
                  {
                    "name": "Miss MongoDB",
                    "age": 35
                  }
                ]
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/find": {
      "post": {
        "summary": "Find Multiple Documents",
        "description": "Using the `/find` endpoint, you can fetch multiple documents at once. Use the `filter` property in the body of the request to specify the criteria on which to filter. If you pass an empty object `{ }`, all the documents in the collection will be returned.",
        "operationId": "FindMultipleDocuments",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "filter": {
                  "type": "object",
                  "properties": {},
                  "description": "filter"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": {}
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/updateMany": {
      "post": {
        "summary": "Update Multiple Documents",
        "description": "Using `/updateMany`, you can update all the documents matching a specific `filter` specified in the body of the request. Use one of the [update operators](https://docs.mongodb.com/manual/reference/operator/update-field/) in the `update` field to update your documents.",
        "operationId": "UpdateMultipleDocuments",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "filter": {
                  "type": "object",
                  "properties": {
                    "age": {
                      "type": "object",
                      "properties": {
                        "$lt": {
                          "type": "integer",
                          "format": "int32",
                          "description": "$lt"
                        }
                      },
                      "description": "age"
                    }
                  },
                  "description": "filter"
                },
                "update": {
                  "type": "object",
                  "properties": {
                    "$set": {
                      "type": "object",
                      "properties": {
                        "age": {
                          "type": "integer",
                          "format": "int32",
                          "description": "age"
                        }
                      },
                      "description": "$set"
                    }
                  },
                  "description": "update"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": {
                  "age": {
                    "$lt": 40
                  }
                },
                "update": {
                  "$set": {
                    "age": 42
                  }
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/deleteMany": {
      "post": {
        "summary": "Delete Many Documents",
        "description": "You can use `/deleteMany` to delete multiple documents at once. Use the `filter` property to specify which documents to delete.  \n  \n**Warning**: Using `filter: { }` will delete all the documents in the collection. Use `/deleteMany` with care.",
        "operationId": "DeleteManyDocuments",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "filter": {
                  "type": "object",
                  "properties": {},
                  "description": "filter"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": {}
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    },
    "/action/aggregate": {
      "post": {
        "summary": "Run Aggregation Pipeline",
        "description": "You can even run [aggregation pipelines](https://docs.mongodb.com/manual/core/aggregation-pipeline/) with the Data API. To do so, use the `/aggregate` endpoint and specify your pipeline in the `pipeline` field of the request body.",
        "operationId": "RunAggregationPipeline",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "dataSource"
                },
                "database": {
                  "type": "string",
                  "description": "database"
                },
                "collection": {
                  "type": "string",
                  "description": "collection"
                },
                "pipeline": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "$sort": {
                        "type": "object",
                        "properties": {
                          "age": {
                            "type": "integer",
                            "format": "int32",
                            "description": "age"
                          }
                        },
                        "description": "$sort"
                      },
                      "$limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "$limit"
                      }
                    }
                  },
                  "description": "pipeline"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "pipeline": [
                  {
                    "$sort": {
                      "age": 1
                    },
                    "$limit": 1
                  },
                  {
                    "$limit": 1
                  }
                ]
              }
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        }
      }
    }
  },
  "definitions": {},
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "api-key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}